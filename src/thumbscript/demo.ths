#thumbscript
// {
//     f: {
//         500 sleepms
//         "we slept" say
//     } go
//     "Waiting" say
//     
//     {
//         1000 sleepms
//         "canceling" say
//         f cancel
//     } go
// 
//     f wait
//     "waited!" say
// } call

// alert. window
// alert. Object.keys. window
// window {
//     :k :v
//     log2(~k)
// } range


// alert(window.updateLineFile.toString())
// alert(updateLineFile.toString())


// for (let key of Object.keys(window)) {
// 
// }
window {
    :k :v
    // k say
    // sleepms(300)
    { ~v } and({ ~v.toString }) {
       funcCode: v.toString 
       k say
       funcCode say
    } ?
} range

// alert. updateLineFile.toString()




waitn: {
    :futures
    gotOne: 0
    futures {
        :i99 :w
        {
            w $runId at "looping runid: " swap cc say
            w wait
            // TODO: need to fix break for async
            // you shouldn't break out of async functions, it should stop at the async function
            // gotOne { breakp } ?
            gotOne { continuep } ?
            1 :gotOne
            futures {
                // dup
                // $runId at "    canceling run id: " swap cc say
                // cancel
                :w99
                w99 $runId at "    cancelling run id: " swap cc say
                w99 cancel
            } local each
        } go drop
    } local range
} local


futureTest: {
    futures: []
    3 {
        // :i i :i2
        // "the i is $i" say
        :i
        {
             //  rand sleepms
             500 rand sleepms
             "the i is $i" say
        } go futures push
    } local loopn
    futures waitn
}
futureTest



xyz: plus. 3 minus. 10 2
say. xyz

say. plus. 2 3
say. ""
say. ""




